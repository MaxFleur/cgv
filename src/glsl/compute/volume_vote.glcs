#version 430

#extension GL_KHR_shader_subgroup_basic: enable
#extension GL_KHR_shader_subgroup_ballot: enable

#define DATA_TYPE_DEFINITION float x; float y; float z;

layout(local_size_x = 256) in;

layout(rgba8ui, binding = 0) uniform readonly coherent uimage3D src_tex;

struct data_type {
	DATA_TYPE_DEFINITION
};

layout(std430, binding = 0) readonly buffer data_buffer {
    data_type data[];
};

layout(std430, binding = 2) writeonly buffer votes_buffer {
    uint votes[];
};

uniform uint n;
uniform uint n_padded;
uniform float threshold;

bool get_vote(in int idx) {
	ivec3 src_size = imageSize(src_tex);
	ivec3 src_coord;

	src_coord.x = idx % src_size.x;
	src_coord.y = (idx / src_size.x) % src_size.y;
	src_coord.z = idx / (src_size.x * src_size.y);

	vec4 p = vec4(imageLoad(src_tex, src_coord)) / 255.0;

	float avg = p[0] + p[1] + p[2] + p[3];
	avg *= 0.25f;

	return true;//avg > threshold;
}

void main() {

    for(uint idx = gl_WorkGroupID.x*gl_WorkGroupSize.x + gl_LocalInvocationID.x; idx < n_padded; idx += gl_WorkGroupSize.x*gl_NumWorkGroups.x) {
        bool vote = idx < n ? get_vote(int(idx)) : false;

        uint ballot = subgroupBallot(vote).x;

        if(subgroupElect())
            votes[gl_SubgroupID + 8*gl_WorkGroupID.x] = ballot;
    }
}
