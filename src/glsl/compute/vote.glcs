#version 430

#define DATA_TYPE_DEFINITION float x; float y; float z;

#define VOTE_DEFINITION return false;

layout(local_size_x = 256) in;

struct data_type {
	DATA_TYPE_DEFINITION
};

layout(std430, binding = 0) readonly buffer data_buffer {
    data_type data[];
};

layout(std430, binding = 1) writeonly buffer vote_buffer {
    uint vote[];
};

uniform uint n;
uniform uint n_padded;

bool get_vote(in data_type d) {
	VOTE_DEFINITION
}

void main() {

    for(uint idx = gl_WorkGroupID.x*gl_WorkGroupSize.x + gl_LocalInvocationID.x; idx < n_padded; idx += gl_WorkGroupSize.x*gl_NumWorkGroups.x) {
        if(idx < n) {
            vote[idx] = get_vote(data[idx]) ? 1 : 0;
        } else {
            vote[idx] = uint(0);
        }
    }
}
