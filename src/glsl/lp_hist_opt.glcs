#version 450

#extension GL_NV_gpu_shader5 : enable
#extension GL_NV_shader_atomic_int64 : enable
#extension GL_NV_shader_atomic_float : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_NV_shader_subgroup_partitioned : enable

#define RESOLUTION_X 128
#define RESOLUTION_Y 32
#define M (RESOLUTION_X - 1)

layout(local_size_x = 256) in;

layout(rgba8ui, binding = 0) uniform readonly coherent uimage3D src_tex;

layout(std430, binding = 6) readonly buffer index_buffer {
	int volume_indices[];
};

struct data_type {
	uint64_t rg;
	uint64_t ba;
};

layout(std430, binding = 0) buffer plots_buffer {
	data_type rgba[];
};

uniform int num_data_values;
uniform float threshold;
uniform	ivec2 indices[6];

struct tf_primitive {
	int type;
	vec4 cntrd;
	vec4 color;
	vec4 width;
};

uniform tf_primitive mdtf[8];
uniform int num_mdtf_primitives;

// return an alpha value equivalent to the value of a gaussian function at the given centroid position with the specified with
float evaluate_gauss_primitive(vec4 density, vec4 gaussian_centroid, vec4 gaussian_width) {

	// construct a matrix with diagonal components set to the given value
	mat4 K;
	K[0] = vec4(2.0 / gaussian_width[0], 0.0, 0.0, 0.0);
	K[1] = vec4(0.0, 2.0 / gaussian_width[1], 0.0, 0.0);
	K[2] = vec4(0.0, 0.0, 2.0 / gaussian_width[2], 0.0);
	K[3] = vec4(0.0, 0.0, 0.0, 2.0 / gaussian_width[3]);
	
	vec4 diff = density - gaussian_centroid;
	mat4 K2 = K*K;

	// calculate exponent; use dot product to multiply two vectors with the intention of receiving a single floating point result
	float exponent = dot(diff, K2*diff);

	return exp(-exponent);
}

// return an alpha value of 1 or 0 based on if the input values are inside a hyperbox
float evaluate_box_primitive(vec4 density, vec4 centroid_positions, vec4 width) {
	vec4 a_delta = abs(density - centroid_positions);
	bvec4 inside = lessThanEqual(a_delta, 0.5*width);
	return all(inside) ? 1.0 : 0.0;
}

// return an alpha value of 1 or 0 based on if the input values are inside a hyperellipsoid
float evaluate_sphere_primitive(vec4 density, vec4 centroid_positions, vec4 width) {
	const vec4 delta = density - centroid_positions;

	const float max_width = max(max(max(width[0], width[1]), width[2]), width[3]);
	const vec4 lambda = 2.0 * vec4(max_width) / width;

	vec4 scaled_diff = delta * lambda;
	scaled_diff *= scaled_diff;

	const float dist = sqrt(scaled_diff[0] + scaled_diff[1] + scaled_diff[2] + scaled_diff[3]) - max_width;

	return dist > 0.0 ? 0.0 : 1.0;
}

// evaluate the multi dimensional transfer function for a given n-dimensional input vector
vec4 evaluate_transfer_function(vec4 density, float alpha_scale) {
	
	vec3 color_sum = vec3(0.0);
	float alpha_sum = 0.0;
	
	for (int i = 0; i < num_mdtf_primitives; i++) {
		tf_primitive tfp = mdtf[i];
		float alpha = 0.0;

		// Calculate the alpha value based on the primitive type
		switch(tfp.type) {
		case 0:
			alpha = evaluate_gauss_primitive(density, tfp.cntrd, tfp.width);
			break;
		case 1:
			alpha = evaluate_box_primitive(density, tfp.cntrd, tfp.width);
			break;
		case 2:
			alpha = evaluate_sphere_primitive(density, tfp.cntrd, tfp.width);
			break;
		}

		// Apply global opacity and primitive color alpha
		alpha *= tfp.color.a * alpha_scale;

		// Add for every primitive
		color_sum += alpha * tfp.color.rgb;
		alpha_sum += alpha;
	}

	color_sum = clamp(color_sum, 0.0, 1.0);
	return vec4(color_sum, 1.0);
}

// Performance with threshold 0.3 | 0.0 = 4 | 73 ms (RTX 2080Ti)
shared uint temp[4*RESOLUTION_X];

#define WRITE_SHARED(ADDR) \
	atomicAdd(temp[ADDR + 0*RESOLUTION_X], color8[0]); \
	atomicAdd(temp[ADDR + 1*RESOLUTION_X], color8[1]); \
	atomicAdd(temp[ADDR + 2*RESOLUTION_X], color8[2]); \
	atomicAdd(temp[ADDR + 3*RESOLUTION_X], color8[3]);

#define SHARED_TO_GLOBAL(I, GADDR, SADDR) \
	atomicAdd(rgba[GADDR + I*plot_size].rg, packUint2x32(uvec2(temp[SADDR + 0*RESOLUTION_X], temp[SADDR + 1*RESOLUTION_X]))); \
	atomicAdd(rgba[GADDR + I*plot_size].ba, packUint2x32(uvec2(temp[SADDR + 2*RESOLUTION_X], temp[SADDR + 3*RESOLUTION_X])));

#define PLOT_LINE(I) \
	y0 = int(p[indices[I].x] * M); \
	y1 = int(p[indices[I].y] * M); \
	dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1; \
	err = M + dy, e2; \
	\
	for(int x = 0; x < RESOLUTION_Y;) { \
		WRITE_SHARED(y0); \
		\
		e2 = 2 * err; \
		err += dy; \
		if(e2 < M) { err += M; y0 += sy; } \
		e2 = 2 * err; \
		err += dy; \
		if(e2 < M) { err += M; y0 += sy; } \
		e2 = 2 * err; \
		err += dy; \
		if(e2 < M) { err += M; y0 += sy; } \
		e2 = 2 * err; \
		err += dy; \
		if(e2 < M) { err += M; y0 += sy; } \
		\
		barrier(); \
		\
		if(lidx < RESOLUTION_X && temp[lidx + 3*RESOLUTION_X] > 0) { \
			plot_idx = lidx + x * RESOLUTION_X; \
			SHARED_TO_GLOBAL(I, plot_idx, lidx); \
			temp[lidx + 0*RESOLUTION_X] = 0; \
			temp[lidx + 1*RESOLUTION_X] = 0; \
			temp[lidx + 2*RESOLUTION_X] = 0; \
			temp[lidx + 3*RESOLUTION_X] = 0; \
		} \
		\
		++x; \
		\
		barrier(); \
	}

void main() {
	int idx = int(gl_GlobalInvocationID.x);
	int lidx = int(gl_LocalInvocationID.x);

	int plot_size = RESOLUTION_X * RESOLUTION_Y;

	if(idx < num_data_values) {
		ivec3 src_size = imageSize(src_tex);
		ivec3 src_coord;

		int volume_idx = volume_indices[idx];

		src_coord.x = volume_idx % src_size.x;
		src_coord.y = (volume_idx / src_size.x) % src_size.y;
		src_coord.z = volume_idx / (src_size.x * src_size.y);

		vec4 p = vec4(imageLoad(src_tex, src_coord)) / 255.0;

		uvec4 color8 = uvec4(128 * evaluate_transfer_function(p, 1.0));

		int y0, y1, dy, sy, err, e2;

		int plot_idx;

		PLOT_LINE(0)
		PLOT_LINE(1)
		PLOT_LINE(2)
		PLOT_LINE(3)
		PLOT_LINE(4)
		PLOT_LINE(5)
	}
}
