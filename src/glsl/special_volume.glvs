#version 430 

//***** begin interface of quaternion.glsl ***********************************
vec4 unit_quaternion();
vec3 rotate_vector_with_quaternion(in vec3 preimage, in vec4 q);
vec3 inverse_rotate_vector_with_quaternion(in vec3 v, in vec4 q);
void quaternion_to_axes(in vec4 q, out vec3 x, out vec3 y, out vec3 z);
void quaternion_to_matrix(in vec4 q, out mat3 M);
void rigid_to_matrix(in vec4 q, in vec3 t, out mat4 M);
//***** end interface of quaternion.glsl ***********************************

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

uniform mat4 clip_box_transform;
uniform mat4 volume_transform;
uniform mat4 volume_transform_inverse;

in vec4 position;

out vec4 position_fs;
out vec3 position_object;
out vec3 eye_fs;

vec3 object_space_eye_pos() {

	return (get_inverse_modelview_matrix() * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
}

void main()
{
	eye_fs = object_space_eye_pos();

	position_fs = get_modelview_projection_matrix() * position;
    position_object = position.xyz;

	gl_Position = position_fs;
}
